// <auto-generated />
using System;
using BetParser.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetParser.Server.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20230218170108_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetParser.Data.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Team1", "Team2", "MatchTime")
                        .IsUnique();

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("BetParser.Data.Models.Odd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MatchId", "Type")
                        .IsUnique();

                    b.ToTable("Odds", (string)null);
                });

            modelBuilder.Entity("BetParser.Data.Models.OddResult", b =>
                {
                    b.Property<int>("OddId")
                        .HasColumnType("integer");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("OddId");

                    b.ToTable("OddResults", (string)null);
                });

            modelBuilder.Entity("BetParser.Data.Models.Odd", b =>
                {
                    b.HasOne("BetParser.Data.Models.Match", "Match")
                        .WithMany("Odds")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("BetParser.Data.Models.OddResult", b =>
                {
                    b.HasOne("BetParser.Data.Models.Odd", "Odd")
                        .WithOne("Result")
                        .HasForeignKey("BetParser.Data.Models.OddResult", "OddId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Odd");
                });

            modelBuilder.Entity("BetParser.Data.Models.Match", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("BetParser.Data.Models.Odd", b =>
                {
                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
